#version 400 core

in vec2 pass_textureCoords;
in vec3 toLightVector;
in vec3 surfaceNormal;
in vec3 toCameraVector;
in vec3 pass_colors;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

void main(void) {
    //vec3 unitNormal = normalize(surfaceNormal);
    //vec3 unitLightVector = normalize(toLightVector);
    //float nDot1 = dot(unitNormal, unitLightVector);
    //float brightness = max(nDot1, 0.2);
    //vec3 diffuse = brightness * lightColour;

    //vec3 toCameraUnit = normalize(toCameraVector);
    //vec3 lightDirection = -unitLightVector;
    //vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
    //float specular = dot(reflectedLightDirection, toCameraUnit);
    //float specularFactor = max(specular, 0.0);
    //float dampedFactor = pow(specularFactor, shineDamper);
    //vec3 finalSpecular = reflectivity * dampedFactor * lightColour;

    //out_Color = vec4(diffuse, 1) * texture(textureSampler, pass_textureCoords) + vec4(finalSpecular, 1);
    vec3 unitNormal = normalize(surfaceNormal);
    float l = 0.8;
    if(dot(unitNormal, vec3(0,1,0)) > 0.8)
    {
        l = 1;
    }
    else if(dot(unitNormal, vec3(0,-1,0)) > 0.8)
    {
        l = 0.4;
    }

    out_Color = l* texture(textureSampler, pass_textureCoords) * vec4(pass_colors, 1.0);
    //out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);

}
